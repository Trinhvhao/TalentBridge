"""
Script to reset databases (ChromaDB and SQLite)
"""
import os
import shutil
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def reset_databases():
    """X√≥a to√†n b·ªô database c≈©"""
    base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    
    # X√≥a ChromaDB
    chroma_path = os.path.join(base_dir, "db", "chroma_db")
    if os.path.exists(chroma_path):
        try:
            shutil.rmtree(chroma_path)
            logging.info(f"‚úÖ ƒê√£ x√≥a ChromaDB: {chroma_path}")
        except Exception as e:
            logging.error(f"‚ùå L·ªói khi x√≥a ChromaDB: {e}")
    else:
        logging.info("ChromaDB kh√¥ng t·ªìn t·∫°i")
    
    # X√≥a SQLite
    sqlite_path = os.path.join(base_dir, "db", "cv_job_matching.db")
    if os.path.exists(sqlite_path):
        try:
            os.remove(sqlite_path)
            logging.info(f"‚úÖ ƒê√£ x√≥a SQLite: {sqlite_path}")
        except Exception as e:
            logging.error(f"‚ùå L·ªói khi x√≥a SQLite: {e}")
    else:
        logging.info("SQLite database kh√¥ng t·ªìn t·∫°i")
    
    # T·∫°o l·∫°i th∆∞ m·ª•c db
    db_dir = os.path.join(base_dir, "db")
    os.makedirs(db_dir, exist_ok=True)
    logging.info(f"‚úÖ ƒê√£ t·∫°o l·∫°i th∆∞ m·ª•c db: {db_dir}")
    
    logging.info("üéâ Reset database ho√†n t·∫•t!")

if __name__ == "__main__":
    reset_databases()

